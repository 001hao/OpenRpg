@using OpenRpg.Editor.Infrastructure.Helpers
@using OpenRpg.Entities.Modifications
@using OpenRpg.Entities.Requirements

<ListEditor Data="ModificationAllowances" OnAdded="OnAdded" OnRemoved="OnRemoved" TItem="ModificationAllowance">
    <HeaderTemplate>
        <th><abbr title="Modification Type">Allowance Type</abbr></th>
        <th><abbr title="Allowed Amount">Allowed Amount</abbr></th>
    </HeaderTemplate>
    <RowTemplate>
        <td>
            <div class="control">
                <div class="select is-fullwidth">
                    <select bind="@context.ModificationType">
                        @foreach (var modificationType in TypesHelper.GetModificationTypes)
                        {
                            <option value=@modificationType.Id>@modificationType.Name</option>
                        }
                    </select>
                </div>
            </div>
        </td>
        <td>
            <div class="control">
                <input class="input" type="text" bind="@context.AmountAllowed" />
            </div>
        </td>
    </RowTemplate>
    <NestedRowTemplate>
        <Accordion Title="Modification Allowance Requirements" HeaderClasses="is-info">
            <RequirementsEditor Requirements="context.Requirements" 
                                OnAdded="x => AddRequirement(context, x)"
                                OnRemoved="x => RemoveRequirement(context, x)">
            </RequirementsEditor>
        </Accordion>
    </NestedRowTemplate>
</ListEditor>

@functions {
    [Parameter]
    public IReadOnlyCollection<ModificationAllowance> ModificationAllowances { get; set; }
    
    [Parameter]
    public EventCallback<ModificationAllowance> OnAdded { get; set; }
    
    [Parameter]
    public EventCallback<ModificationAllowance> OnRemoved { get; set; }
    
    public void AddRequirement(ModificationAllowance context, Requirement newRequirement)
    {
        if (context.Requirements is List<Requirement> list)
        {
            list.Add(newRequirement);
            return;
        }

        var newList = context.Requirements.ToList();
        newList.Add(newRequirement);
        context.Requirements = newList;
    }
    
    public void RemoveRequirement(ModificationAllowance context, Requirement removedRequirement)
    {
        if (context.Requirements is List<Requirement> list)
        {
            list.Remove(removedRequirement);
            return;
        }
        
        var newList = context.Requirements.ToList();
        newList.Remove(removedRequirement);
        context.Requirements = newList;
    }
}
