@using OpenRpg.CurveFunctions
@using OpenRpg.CurveFunctions.Scaling
@using OpenRpg.Editor.UI.Models

<div class="field">
    <label class="label">@(XAxisLabel) Scale</label>
</div>
<div class="field is-horizontal">
    <div class="field-body">
        <div class="field">
            <input class="input" @bind="InputScaleMin" placeholder="Min" @bind:after="OnUpdated"/>
        </div>
        <div class="field">
            <input class="input" @bind="InputScaleMax" placeholder="Max" @bind:after="OnUpdated"/>
        </div>
    </div>
</div>
<div class="field">
    <label class="label">@YAxisLabel Scale</label>
</div>
<div class="field is-horizontal">
    <div class="field-body">
        <div class="field">
            <input class="input" @bind="OutputScaleMin" placeholder="Min" @bind:after="OnUpdated"/>
        </div>
        <div class="field">
            <input class="input" @bind="OutputScaleMax" placeholder="Max" @bind:after="OnUpdated"/>
        </div>
    </div>
</div>

<div class="field">
    <div class="control">
        <PresetCurveFunctionEditor CurveFunction="CurveFunction" ShowChart="false" OnUpdate="OnCurveFunctionUpdated"/>
    </div>
</div>
<div class="field" style="height: 400px;">
    <ScalingFunctionChart ScalingFunction="ScalingFunction" XAxisName="@XAxisLabel" YAxisName="@YAxisLabel" @ref="ScalingChartRefreshable"/>
</div>

@code {
    [Parameter]
    public ScalingFunction ScalingFunction { get; set; }
    
    [Parameter]
    public string XAxisLabel { get; set; } = "Input";
    
    [Parameter]
    public string YAxisLabel { get; set; } = "Output";
    
    [Parameter]
    public EventCallback<ScalingFunction> OnUpdate { get; set; }

    public IRefreshable ScalingChartRefreshable { get; set; }
    
    public float TestOutputValue { get; set; }
    
    public ICurveFunction CurveFunction { get; set; }
    public float InputScaleMin { get; set; }
    public float InputScaleMax { get; set; }
    public float OutputScaleMin { get; set; }
    public float OutputScaleMax { get; set; }
    
    public float TestInputValue { get; set; }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        CurveFunction = ScalingFunction.CurveFunction ?? PresetCurves.Linear;
        InputScaleMin = ScalingFunction.InputScale.Min;
        InputScaleMax = ScalingFunction.InputScale.Max;
        OutputScaleMin = ScalingFunction.OutputScale.Min;
        OutputScaleMax = ScalingFunction.OutputScale.Max;
    }

    private async Task OnCurveFunctionUpdated(ICurveFunction x)
    {
        CurveFunction = x;
        await OnUpdated();
    }

    public async Task OnUpdated()
    {
        ScalingFunction = new ScalingFunction(CurveFunction, OutputScaleMin, OutputScaleMax, InputScaleMin, InputScaleMax);
        await OnUpdate.InvokeAsync(ScalingFunction);
        await ScalingChartRefreshable.Refresh();
        await ScalingChartRefreshable.Refresh();
    }

}