@page "/classes"

@using OpenRpg.Core.Classes.Templates
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Requirements
@using OpenRpg.Data
@using OpenRpg.Data.Conventions.Extensions
@using OpenRpg.Editor.Infrastructure.Extensions
@using OpenRpg.Editor.Infrastructure.Pipelines.Typed
@using OpenRpg.Editor.Infrastructure.Services
@using OpenRpg.Items.Templates
@using OpenRpg.Localization.Data.Repositories

@inject IJSRuntime JS
@inject IRepository Repository
@inject ISaveDataPipeline<List<ClassTemplate>> SavePipeline
@inject ILocaleRepository LocaleRepository;
@inject ICloner Cloner;

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Class Templates" Data="Repository.DataSource.GetAll<ClassTemplate>()" SelectedItem="CurrentClassTemplate"
                        OnAdd="AddClass" 
                        OnSelected="(selected => SelectClass(selected as ClassTemplate))">
        </ContentSidebar>
    </div>
    <div class="column">
        
        <div class="is-rounded box">
            <BasicDetailsEditor Data="CurrentClassTemplate">
                <AdditionalContent>
                    <AssetCodeEditor Variables="CurrentClassTemplate.Variables" DefaultAssetCode="@($"class-{CurrentClassTemplate.Id}")" 
                                     OnAssetCodeChanged="OnAssetCodeChanged"/>
                </AdditionalContent>
            </BasicDetailsEditor>
        </div>

        <div class="is-rounded box">
            <LocaleDetails LocaleData="CurrentClassTemplate"></LocaleDetails>
        </div>
        
        <div class="is-rounded box">
            <h4 class="title is-4 has-text-dark">Effects</h4>
            <EffectsEditor Effects="CurrentClassTemplate.Effects" OnUpdate="UpdateEffect"></EffectsEditor>
        </div>
        
        <div class="is-rounded box">
            <h4 class="title is-4 has-text-dark">Requirements</h4>
            <RequirementsEditor Requirements="CurrentClassTemplate.Requirements" OnUpdate="UpdateRequirements"></RequirementsEditor>
        </div>
        
        <div class="field is-grouped has-text-centered">
            <p class="control">
                <a class="button is-success" @onclick="SaveChanges">
                    Save Item
                </a>
            </p>
            <p class="control">
                <a class="button is-info" @onclick="CloneTemplate">
                    Clone Item
                </a>
            </p>
            <p class="control">
                <a class="button is-danger" @onclick="DeleteTemplate">
                    Delete Item
                </a>
            </p>
        </div>
        
    </div>
</div>

@functions {
    public ClassTemplate CurrentClassTemplate;

    protected override void OnInitialized()
    {
        SelectDefault();
    }
    
    public void SelectDefault()
    {
        var firstClassTemplate = Repository.GetAll<ClassTemplate>().FirstOrDefault();
        
        if (firstClassTemplate != null)
        { CurrentClassTemplate = firstClassTemplate; }
        else
        { AddClass(); }
    }

    public void AddClass()
    {
        CurrentClassTemplate = new ClassTemplate();
        CurrentClassTemplate.Id = Repository.GetAll<ClassTemplate>().Count() + 1;
        CurrentClassTemplate.Variables.AssetCode($"class-{CurrentClassTemplate.Id}");
        CurrentClassTemplate.GenerateLocaleCodes(CurrentClassTemplate.Variables.AssetCode());
        Repository.Create(CurrentClassTemplate);
        StateHasChanged();
    }

    public void SelectClass(ClassTemplate classTemplate)
    {
        CurrentClassTemplate = classTemplate;
        StateHasChanged();
    }
    
    public void CloneTemplate()
    {
        var clone = Cloner.Clone(CurrentClassTemplate);
        clone.Id = Repository.GetAll<ClassTemplate>().Count() + 1;
        clone.Variables.AssetCode($"{CurrentClassTemplate.Variables.AssetCode()}-clone");
        clone.GenerateLocaleCodes(clone.Variables.AssetCode());
        Repository.Create<ClassTemplate>(clone);
        
        var options = new {message = $"Cloned Class {CurrentClassTemplate.Variables.AssetCode()}", type = "is-success", position = "bottom-center"};
        JS.InvokeAsync<object>("bulmaToast.toast", options);
        
        CurrentClassTemplate = clone;
        StateHasChanged();
    }
    
    public void DeleteTemplate()
    {
        Repository.Delete<ClassTemplate>(CurrentClassTemplate.Id);
        var options = new {message = $"Deleted Item {CurrentClassTemplate.Variables.AssetCode()}", type = "is-success", position = "bottom-center"};
        JS.InvokeAsync<object>("bulmaToast.toast", options);   
        SelectDefault();
    }

    public async void SaveChanges()
    {
        try
        {
            await SavePipeline.Execute(Repository.GetAll<ClassTemplate>());
            var options = new {message = "Classes saved", type = "is-success", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);

        }
        catch (Exception e)
        {
            var options = new {message = $"Error Saving: {e.Message}", type = "is-danger", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);   
        }
    }
    
    public void UpdateEffect(IReadOnlyCollection<Effect> updatedEffects)
    {
        CurrentClassTemplate.Effects = updatedEffects;
        StateHasChanged();
    }
    
    public void UpdateRequirements(IReadOnlyCollection<Requirement> updatedRequirements)
    {
        CurrentClassTemplate.Requirements = updatedRequirements;
        StateHasChanged();
    }
    
    public void OnAssetCodeChanged(string newAssetCode)
    { CurrentClassTemplate.UpdateLocale(newAssetCode, LocaleRepository); }
}
