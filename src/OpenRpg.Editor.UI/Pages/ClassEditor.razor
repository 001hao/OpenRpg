@page "/classes"

@using OpenRpg.Data
@using OpenRpg.Data.Conventions.Extensions
@using OpenRpg.Editor.Core.Services.Notifications
@using OpenRpg.Editor.Infrastructure.Extensions
@using OpenRpg.Editor.Infrastructure.Services
@using OpenRpg.Editor.UI.Extensions
@using OpenRpg.Entities.Classes.Templates
@using OpenRpg.Entities.Effects
@using OpenRpg.Entities.Requirements
@using OpenRpg.Localization.Data.Repositories

@inject IRepository Repository
@inject ILocaleRepository LocaleRepository;
@inject ICloner Cloner;
@inject INotifier Notifier;

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Class Templates" Data="Repository.DataSource.GetAll<ClassTemplate>()" SelectedItem="CurrentClassTemplate"
                        OnAdd="AddClass" 
                        OnSelected="(selected => SelectClass(selected as ClassTemplate))">
        </ContentSidebar>
    </div>
    <div class="column">
        
        <Accordion Title="Class Template" IsExpanded="true">
            <BasicDetailsEditor Data="CurrentClassTemplate">
                <AdditionalContent>
                    <AssetCodeEditor Variables="CurrentClassTemplate.Variables" DefaultAssetCode="@($"class-{CurrentClassTemplate.Id}")" 
                                     OnAssetCodeChanged="OnAssetCodeChanged"/>
                </AdditionalContent>
            </BasicDetailsEditor>
        </Accordion>

        <Accordion Title="Locale Details" IsExpanded="true">
            <LocaleDetails LocaleData="CurrentClassTemplate" />
        </Accordion>
        
        <Accordion Title="Class Effects" IsExpanded="true">
            <EffectsEditor Effects="CurrentClassTemplate.Effects" OnAdded="AddEffect" OnRemoved="RemoveEffect" />
        </Accordion>
        
        <Accordion Title="Class Requirements" IsExpanded="true">
            <RequirementsEditor Requirements="CurrentClassTemplate.Requirements" OnAdded="AddRequirement" OnRemoved="RemoveRequirement" />
        </Accordion>
        
        <div class="field is-grouped has-text-centered">
            <p class="control">
                <a class="button is-info" @onclick="CloneTemplate">
                    Clone Template
                </a>
            </p>
            <p class="control">
                <a class="button is-danger" @onclick="DeleteTemplate">
                    Delete Template
                </a>
            </p>
        </div>
        
    </div>
</div>

@functions {
    public ClassTemplate CurrentClassTemplate;

    protected override void OnInitialized()
    {
        SelectDefault();
    }
    
    public void SelectDefault()
    {
        var firstClassTemplate = Repository.GetAll<ClassTemplate>().FirstOrDefault();
        
        if (firstClassTemplate != null)
        { CurrentClassTemplate = firstClassTemplate; }
        else
        { AddClass(); }
    }

    public void AddClass()
    {
        CurrentClassTemplate = new ClassTemplate();
        CurrentClassTemplate.Id = Repository.GetAll<ClassTemplate>().Count() + 1;
        CurrentClassTemplate.Variables.AssetCode($"class-{CurrentClassTemplate.Id}");
        CurrentClassTemplate.GenerateLocaleCodes(CurrentClassTemplate.Variables.AssetCode());
        Repository.Create(CurrentClassTemplate);
        StateHasChanged();
    }

    public void SelectClass(ClassTemplate classTemplate)
    {
        CurrentClassTemplate = classTemplate;
        StateHasChanged();
    }
    
    public async Task CloneTemplate()
    {
        var clone = Cloner.Clone(CurrentClassTemplate);
        clone.Id = Repository.GetAll<ClassTemplate>().Count() + 1;
        clone.Variables.AssetCode($"{CurrentClassTemplate.Variables.AssetCode()}-clone");
        clone.GenerateLocaleCodes(clone.Variables.AssetCode());
        Repository.Create(clone);
        await Notifier.ShowNotification($"Cloned Class {CurrentClassTemplate.Variables.AssetCode()}");
        
        CurrentClassTemplate = clone;
        StateHasChanged();
    }
    
    public async Task DeleteTemplate()
    {
        Repository.Delete<ClassTemplate>(CurrentClassTemplate.Id);
        await Notifier.ShowNotification($"Deleted Item {CurrentClassTemplate.Variables.AssetCode()}");
        SelectDefault();
    }
    
    public void AddEffect(IEffect effect)
    { CurrentClassTemplate.Effects = CurrentClassTemplate.Effects.Add(effect); }
    
    public void RemoveEffect(IEffect effect)
    { CurrentClassTemplate.Effects = CurrentClassTemplate.Effects.Remove(effect); }
    
    public void AddRequirement(Requirement requirement)
    { CurrentClassTemplate.Requirements = CurrentClassTemplate.Requirements.Add(requirement); }
    
    public void RemoveRequirement(Requirement requirement)
    { CurrentClassTemplate.Requirements = CurrentClassTemplate.Requirements.Remove(requirement); }
    
    public void OnAssetCodeChanged(string newAssetCode)
    { CurrentClassTemplate.UpdateLocale(newAssetCode, LocaleRepository); }
}
