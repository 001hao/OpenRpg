@page "/entities/persistence"

@using Newtonsoft.Json
@using OpenRpg.Core.Templates
@using OpenRpg.Demos.Infrastructure.JSON
@using OpenRpg.Entities.Entity
@using OpenRpg.Genres.Characters
@using OpenRpg.Genres.Extensions
@using OpenRpg.Genres.Populators.Entity.Stats

@inject DemoCharacterBuilder CharacterBuilder;
@inject IEntityStatPopulator StatPopulator;
@inject ITemplateAccessor TemplateAccessor;

<Markdown>
   #### Character Persistence
   As mentioned in the advanced stats page, we only really need to care about the runtime data from our app/game, and
   luckily our `Character` only really stores runtime information so we can just serialize it and rehydrate at will.
   
   > In previous versions of the library we didnt have such a clean divide between static and state data, but now there
   > is a much better division so you can pretty much serialize any `ITemplateData` implementation or `Entity` related
   > object however/whenever you want.
   
   If we look at this code snippet below we can see how to use the built in `Character` model which we can just throw into 
   any old object serialization framework and see what it looks like (using `JSON.NET` here).
   
</Markdown>

<br/>

<div class="columns">
    <div class="column is-half">
        <CardSection>
            <a class="button is-info" @onclick="RandomizeCharacter">Regenerate Character</a>
            <BasicCharacter Character="@_randomCharacter" TemplateAccessor="TemplateAccessor" />
        </CardSection>
    </div>
    <div class="column is-half">
        <CardSection>
        <pre>
            @_persistedData
        </pre>
        </CardSection>
    </div>
</div>

<br/>

<div class="columns">
    <div class="column is-half">
        <Markdown>
            ## Restoring A Persisted Character
           
            Now we have some serialized character data we can just pass it back through and deserialize it and get back
            our previous `Character` instance, and it will contain all the important runtime data it had when we saved it.
            
            The only thing it wont have is the generated stats based off the effects of the related items, classes, races
            etc, however this is easily fixed as all we need to do is regenerate all of that information using the `StatPopulator`
            like so:
            
            ```csharp
            var regeneratedCharacter = JsonConvert.DeserializeObject&ltCharacter&gt(jsonData);
            StatPopulator.Populate(regeneratedCharacter.Stats, regeneratedCharacter.ComputeEffects(TemplateAccessor), null);
            ```
            
            > In the real world you can store it however you want, be it in a database, a file, as xml, binary json etc.
        </Markdown>
    </div>
    <div class="column is-half">
        <CardSection>
            <a class="button is-info" @onclick="ReloadCharacterFromData">Restore Character From Json Data</a>
            <BasicCharacter Character="@_regeneratedCharacter" TemplateAccessor="TemplateAccessor" />
        </CardSection>
    </div>
</div>

@code {
    private Character _randomCharacter, _regeneratedCharacter;
    private string _persistedData = string.Empty;
    private JsonSerializerSettings _jsonSettings;
    
    protected override void OnInitialized()
    {
        _jsonSettings = new JsonSerializerSettings()
        {
            TypeNameHandling = TypeNameHandling.Auto,
            ContractResolver = new IgnorePropertiesResolver(new[] { nameof(Entity.Stats) })
        };
        
        RandomizeCharacter();
        ReloadCharacterFromData();
        
        base.OnInitialized();
    }
    
    public void RandomizeCharacter()
    {
        _randomCharacter = CharacterBuilder.CreateNew().Build();
        PersistCharacter();
    }
    
    public void PersistCharacter()
    {
        _persistedData = JsonConvert.SerializeObject(_randomCharacter, Formatting.Indented, _jsonSettings);
        StateHasChanged();
    }

    public void ReloadCharacterFromData()
    {
        _regeneratedCharacter = JsonConvert.DeserializeObject<Character>(_persistedData, _jsonSettings);
        StatPopulator.Populate(_regeneratedCharacter.Stats, _regeneratedCharacter.ComputeEffects(TemplateAccessor), null);
        StateHasChanged();
    }
}