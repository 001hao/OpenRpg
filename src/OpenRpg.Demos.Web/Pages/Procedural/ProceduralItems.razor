@page "/procedural/procedural-items"
@using Newtonsoft.Json
@using OpenRpg.Core.Utils
@using OpenRpg.CurveFunctions
@using OpenRpg.CurveFunctions.Scaling
@using OpenRpg.Demos.Infrastructure.Templates
@using OpenRpg.Entities.Effects
@using OpenRpg.Entities.Extensions
@using OpenRpg.Entities.Procedural
@using OpenRpg.Entities.Types
@using OpenRpg.Genres.Fantasy.Types
@using OpenRpg.Items
@using OpenRpg.Items.Extensions
@using Range = OpenRpg.Core.Utils.Range
@using OpenRpg.Items.Templates

@inject IRandomizer Randomizer;

<Markdown>
    ## Procedural Templates
    Everything we have gone over so far has been related to making static templates, then making instances of those templates.
    
    This is all well and good, but what if we wanted to have some sort of procedural content, like a weapon that has various possible effects
    and they all share the same template but are able to have slight different effects per instance.
    
    Well as it happens we have you covered, you can make use of the optional `ProceduralEffects` variable on any template to provide procedural
    effects that can be references from the instance. Lets take a look at how it works.
</Markdown>

<br />

<div class="columns">
    <div class="column is-two-thirds">
        <Markdown>
            ### A Simple Procedural Weapon Template
            Lets do something simple like creating a basic weapon template which will have some varying effects.
            
            To start with we need to setup our `ProceduralEffects` configuration, here is an example:
            ```csharp
            var possibleEffects = new List&lt;GroupedEffect&gt;
            {
            new() { GroupType = CoreProceduralGroupTypes.Primary, EffectType = FantasyEffectTypes.BluntDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(20, 30), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { GroupType = CoreProceduralGroupTypes.Primary, EffectType = FantasyEffectTypes.PiercingDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(20, 30), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.StrengthBonusAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 3), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.DexterityBonusAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 3), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.FireDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 5), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.WindDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 5), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            };

            var proceduralEffects = new ProceduralEffects()
            {
            EffectAmount = new Range(1, 3),
            Effects = possibleEffects,
            };
            ```
            
            I know its a lot of code but its quite simple in whats going on, its making 2 `Primary` effects to choose from, which means you will ALWAYS get 1 of them
            applied to the generated item, and it wont count towards the effect amount. Then we have 4 `Optional` effects to choose from, and we setup in the `ProceduralEffects` 
            configuration that we will allow the generated instance to take between 1 to 3 of the optional effects.
            
            > You dont NEED `Primary` effects, and by default all `GroupedEffect` instances are `Optional`, it is also worth mentioning that this all works with the default
            > `IHasEffects` interface, so you can have the template have `Effects` that are ALWAYS applied just like any normal template, then the procedural content is 
            > added on top as optional content.
            
            Once we have setup that procedural content we just need to apply it to a template, like so:
            ```csharp
            var proceduralTemplate = new ItemTemplate()
            {
            Id = 1,
            NameLocaleId = "Magical Random Sword",
            ItemType = FantasyItemTypes.GenericWeapon
            };
            proceduralTemplate.Variables.ProceduralEffects(proceduralEffects);
            ```
            
            Now we have done that, we can call `proceduralTemplate.GenerateProceduralInstance(Randomizer)` which will use the procedural config to randomly
            work out what effects to use and then generate an `ItemData` instance with the given effects associated.
            
            > When we say associated we mean that the `ItemData` has a link to the template as usual, but internally it will have a list of `Association`
            > variables stored inside its `Variables` which contain the `id/index` of the effect on the template it uses, as well as a `Value` if needed
            > which indicates how potent the effect is, as we use scaled effects so if it is using `Value` scaling type it will auto randomize a value
            > and treat it like a static effect.
            
            Here is a real example of the above, click the button a few times and see how it changes the item instance.
        </Markdown>
    </div>
    <div class="column is-one-third">
        <CardSection>
            <div class="control">
                <a class="button is-info" @onclick="RefreshProceduralItem">Generate New Item</a>
            </div>
            <div class="control">
                <ItemDetails Item="Item" OverriddenTemplateAccessor="TemplateAccessor"/>
            </div>
            <div class="control">
                <div class="content">
                    <pre>@_serializedItemData</pre>
                </div>
            </div>
        </CardSection>
    </div>
</div>

<br />

<div class="columns">
    <div class="column is-half">
        <Markdown>
            ## Procedural Values & Bell Curves
            You may have noticed in the previous example that we assigned a bell curve function rather than the normal linear style functions.
            
            This is for good reason, as we are using this as a way to try and balance the value outcome to be generally in the lower/middle somewhere.
            so when we have a procedural effect with a `ScalingType` of `Value` we are deciding what value to plot at generation time. 
            
            You can use other presets (or even custom) curve types depending on how you want the spread of the value to be applied, so in the
            bell curve example you will only get the upper end values if you get between 40-60, which gives it a 20% chance of a higher rate
            item, but you could make that even rarer, or less rare, but as long as you keep the min value in a reasonable range then it should
            yield decent rolls for most generations, just offering exceptional values for those who keep farming etc.
        </Markdown>
    </div>
    <div class="column is-half">
        <CardSection>
            <ScalingFunctionChart Title="Blunt Damage Bell Curve" ScalingFunction="BluntScalingFunction"
                                  XAxisName="Procedural Value" YAxisName="Blunt Damage" />
        </CardSection>
    </div>
</div>

@code {
    private ItemTemplate proceduralItemTemplate;
    private ItemData _proceduralItemData;
    private ManualTemplateAccessor TemplateAccessor;
    private string _serializedItemData = string.Empty;
    
    public Item Item => new() { Template = proceduralItemTemplate, Data = _proceduralItemData };
    public ScalingFunction BluntScalingFunction { get; set; }
        
    private JsonSerializerSettings JsonSettings = new()
    {
        TypeNameHandling = TypeNameHandling.Auto,
        Formatting = Formatting.Indented
    };

    protected override void OnInitialized()
    {
        TemplateAccessor = new ManualTemplateAccessor();
        var possibleEffects = new List<GroupedEffect> 
        {
            new() { GroupType = CoreProceduralGroupTypes.Primary, EffectType = FantasyEffectTypes.BluntDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(20, 30), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { GroupType = CoreProceduralGroupTypes.Primary, EffectType = FantasyEffectTypes.PiercingDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(20, 30), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.StrengthBonusAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 3), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.DexterityBonusAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 3), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.FireDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 5), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
            new() { EffectType = FantasyEffectTypes.WindDamageAmount, PotencyFunction = new ScalingFunction(PresetCurves.BellCurve, new RangeF(1, 5), RangeF.ZeroToOneHundred), ScalingType = CoreEffectScalingTypes.Value },
        };

        BluntScalingFunction = possibleEffects[0].PotencyFunction;
        
        var proceduralEffects = new ProceduralEffects()
        {
            EffectAmount = new Range(1, 3),
            Effects = possibleEffects,
        };

        proceduralItemTemplate = new ItemTemplate()
        {
            Id = 1,
            NameLocaleId = "Magical Random Sword",
            ItemType = FantasyItemTypes.GenericWeapon
        };
        proceduralItemTemplate.Variables.AssetCode("sword");
        proceduralItemTemplate.Variables.ProceduralEffects(proceduralEffects);
        proceduralItemTemplate.Variables.QualityType(FantasyItemQualityTypes.EpicQuality);
        TemplateAccessor.AddTemplate(proceduralItemTemplate);

        RefreshProceduralItem();
        base.OnInitialized();
    }

    private void RefreshProceduralItem()
    {
        _proceduralItemData = proceduralItemTemplate.GenerateProceduralInstance(Randomizer);
        _serializedItemData = JsonConvert.SerializeObject(_proceduralItemData, JsonSettings);
    }
}