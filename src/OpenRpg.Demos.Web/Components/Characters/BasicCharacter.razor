@using OpenRpg.Genres.Characters
@using OpenRpg.Core.Templates
@using OpenRpg.Entities.Classes
@using OpenRpg.Entities.Effects
@using OpenRpg.Entities.Effects.Processors
@using OpenRpg.Entities.Extensions
@using OpenRpg.Entities.Races
@using OpenRpg.Entities.State.Variables
@using OpenRpg.Entities.Stats.Variables
@using OpenRpg.Genres.Extensions

@inject IEffectProcessor EffectProcessor;

<CardSection>
    <div class="container">
        @if (Character != null)
        {
            <CharacterDetails Name="@Character.NameLocaleId" 
                              Race="@TemplateAccessor.ToInstance(Character.Variables.Race())"
                              Class="@TemplateAccessor.ToInstance(Character.Variables.Class())" />
            <br/>
            <CharacterVitals Stats="@Character.Stats" State="@Character.State" />
            <br/>
            <CharacterStats Stats="@Character.Stats" />
            <br/>
            <div class="columns">
                <div class="column has-text-centered">
                    <h4 class="subtitle mb-2 has-text-dark has-text-centered">Race Effects</h4>
                    <EffectList Effects="@GetRaceEffects()" />
                </div>
                <div class="column has-text-centered">
                    <h4 class="subtitle mb-2 has-text-dark">Class Effects</h4>
                    <EffectList Effects="@GetClassEffects()" />
                </div>
            </div>
        }
    </div>
</CardSection>

@code {
    [Parameter]
    public Character Character { get; set; }
    
    [Parameter]
    public ITemplateAccessor TemplateAccessor { get; set; }

    public IReadOnlyCollection<StaticEffect> GetRaceEffects()
    { return EffectProcessor.ComputeEffects(TemplateAccessor.GetRaceTemplate(Character.Variables.Race().TemplateId), Character).ToArray(); }
    
    public IReadOnlyCollection<StaticEffect> GetClassEffects()
    { return EffectProcessor.ComputeEffects(TemplateAccessor.GetClassTemplate(Character.Variables.Class().TemplateId), Character).ToArray(); ; }
}