@using OpenRpg.Genres.Fantasy.Types
@using System.Reflection
@using OpenRpg.Entities.Effects
@using OpenRpg.Entities.Requirements
@using OpenRpg.Genres.Characters
@using OpenRpg.Genres.Extensions
@using OpenRpg.Genres.Requirements
@using OpenRpg.Localization.Data.Extensions
@using OpenRpg.Localization.Data.Repositories

@inject ILocaleRepository LocaleRepository
@inject ICharacterRequirementChecker RequirementsChecker

@if (Effects != null && Effects.Count > 0)
{
    <div class="content is-small has-text-centered">
        @foreach (var effect in Effects)
        {
            var requirementsMet = AreAllRequirementsMet(effect);
            <li style="list-style: none;">
                @if (effect is StaticEffect staticEffect)
                {
                    <span class="effect-section @(staticEffect.Potency > 0 ? "has-text-success" : "has-text-danger")">
                        <span class="@(requirementsMet ? "" : "is-strikethrough")">@(staticEffect.Potency > 0 ? "+" : "")@(staticEffect.Potency) @GetEffectText(effect.EffectType)</span>
                        @if (HasRequirements(staticEffect))
                        {
                            <div class="requirement-section">
                                <RequirementList Character="Character" Requirements="effect.Requirements.ToArray()"></RequirementList>
                            </div>
                        }
                    </span>
                }
            </li>
        }
    </div>
}

@code {
    [Parameter]
    public IReadOnlyCollection<IEffect> Effects { get; set; }

    [Parameter]
    public Character Character { get; set; }

    private int[] _percentageEffectTypeCache;

    protected override void OnInitialized()
    {
        // You could easily add other types in if you had custom ones
        _percentageEffectTypeCache = GetAllPercentageEffectTypeIds(typeof(FantasyEffectTypes));
        base.OnInitialized();
    }

    private int[] GetAllPercentageEffectTypeIds(Type effectTypes)
    {
        return effectTypes
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Where(x => x.Name.Contains("Percentage"))
            .Select(x => (int)x.GetValue(null))
            .ToArray();
    }


    public bool IsPercentageEffect(int effectType)
    { return _percentageEffectTypeCache.Contains(effectType); }

    public string GetEffectText(int effectType)
    { return LocaleRepository.Get(LocaleDataGenerator.GetKeyFor(LocaleDataGenerator.EffectTextKey, effectType)); }

    public string GetPotencySymbol(float potency)
    { return potency > 0 ? "+" : "-"; }

    public bool HasRequirements(IEffect staticEffect)
    {
        if (staticEffect.Requirements == null)
        { return false;}
        
        if(!staticEffect.Requirements.Any())
        { return false; }

        return true;
    }

    public bool AreAllRequirementsMet(IEffect staticEffect)
    {
        if(Character == null)
        { return true; }

        if(!HasRequirements(staticEffect))
        { return true; }

        return RequirementsChecker.AreRequirementsMet(Character, staticEffect);
    }

    public bool IsRequirementMet(Requirement requirement)
    { return RequirementsChecker.IsRequirementMet(Character, requirement); }

}