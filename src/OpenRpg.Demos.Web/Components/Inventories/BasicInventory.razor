@using OpenRpg.Core.Templates
@using OpenRpg.Items.Extensions
@using OpenRpg.Items.Types
@using OpenRpg.Genres.Characters
@using OpenRpg.Items
@using OpenRpg.Items.Inventories

@for (var i = 0; i < Inventory.Variables.MaxSlots(); i+=SlotsPerRow)
{
    <div class="columns">
        @for (var row = 0; row < SlotsPerRow; row++)
        {
            <div class="column">
                @{ var slotIndex = i + row;}
                <div @onclick="@(() => OnItemInteraction.InvokeAsync(GetItemFromIndex(slotIndex)))">
                    <InventoryIcon Item="@GetItemFromIndex(slotIndex)" Character="Character" />
                </div>
            </div>
        }
    </div>
}
<div class="subtitle has-text-dark has-text-right">
    @(Inventory.Items.Count) @(Inventory.Variables.ContainsKey(InventoryVariableTypes.MaxSlots) ? $"/ {Inventory.Variables.MaxSlots()}" : "") Items
</div>

@code {
    [Parameter]
    public Inventory Inventory { get; set; }

    [Parameter]
    public int SlotsPerRow { get; set; } = 8;

    [Parameter]
    public Character Character { get; set; }

    [Parameter]
    public EventCallback<Item> OnItemInteraction { get; set; }
    
    [Parameter]
    public ITemplateAccessor TemplateAccessor { get; set; }

    public Item GetItemFromIndex(int itemIndex)
    {
        if (itemIndex >= Inventory.Items.Count)
        { return null; }

        return TemplateAccessor.ToInstance(Inventory.Items[itemIndex]);
    }

    public void Refresh()
    {
        StateHasChanged();
    }

}