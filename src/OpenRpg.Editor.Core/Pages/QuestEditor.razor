@page "/quests"

@using OpenRpg.Core.Requirements
@using OpenRpg.Data
@using OpenRpg.Data.Conventions.Extensions
@using OpenRpg.Editor.Infrastructure.Extensions
@using OpenRpg.Editor.Infrastructure.Pipelines.Typed
@using OpenRpg.Editor.Infrastructure.Services
@using OpenRpg.Localization.Data.Repositories
@using OpenRpg.Quests

@inject IJSRuntime JS
@inject IRepository Repository
@inject ISaveDataPipeline<List<Quest>> SavePipeline;
@inject ILocaleRepository LocaleRepository;
@inject ICloner Cloner;

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Quests" Data="Repository.GetAll<Quest>()" SelectedItem="CurrentQuest"
                    OnAdd="AddQuest" OnSelected="selected => SelectQuest(selected as Quest)">
        </ContentSidebar>
    </div>
    <div class="column has-background-grey-dark">
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <BasicDetailsEditor Data="CurrentQuest">
                <AdditionalContent>
                    <AssetCodeEditor Variables="CurrentQuest.Variables" DefaultAssetCode="@($"item-{CurrentQuest.Id}")" 
                                     OnAssetCodeChanged="OnAssetCodeChanged"/>
                </AdditionalContent>
            </BasicDetailsEditor>
        </div>

        <div class="is-rounded has-background-dark p-lg m-md">
            <LocaleDetails LocaleData="CurrentQuest"></LocaleDetails>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Objectives</h4>
            <ObjectivesEditor Objectives="CurrentQuest.Objectives" OnUpdate="UpdateObjectives"></ObjectivesEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Gifts</h4>
            <RewardsEditor Rewards="CurrentQuest.Gifts" OnUpdate="UpdateGifts"></RewardsEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Rewards</h4>
            <RewardsEditor Rewards="CurrentQuest.Rewards" OnUpdate="UpdateRewards"></RewardsEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Requirements</h4>
            <RequirementsEditor Requirements="CurrentQuest.Requirements" OnUpdate="UpdateRequirements"></RequirementsEditor>
        </div>
        
        <div class="field is-grouped has-text-centered">
            <p class="control">
                <a class="button is-success" @onclick="SaveChanges">
                    Save Item
                </a>
            </p>
            <p class="control">
                <a class="button is-info" @onclick="CloneTemplate">
                    Clone Item
                </a>
            </p>
            <p class="control">
                <a class="button is-danger" @onclick="DeleteTemplate">
                    Delete Item
                </a>
            </p>
        </div>
        
    </div>
</div>

@functions {
    public Quest CurrentQuest;

    protected override void OnInitialized()
    {
        SelectDefault();
    }

    public void SelectDefault()
    {
        var firstQuest = Repository.GetAll<Quest>().FirstOrDefault();
        if (firstQuest != null)
        { CurrentQuest = firstQuest; }
        else
        { AddQuest(); }
    }

    public void AddQuest()
    {
        CurrentQuest = new Quest();
        CurrentQuest.Id = Repository.GetAll<Quest>().Count() + 1;
        CurrentQuest.Variables.AssetCode($"quest-{CurrentQuest.Id}");
        CurrentQuest.GenerateLocaleCodes(CurrentQuest.Variables.AssetCode());
        Repository.Create(CurrentQuest);
        StateHasChanged();
    }

    public void SelectQuest(Quest quest)
    {
        CurrentQuest = quest;
        StateHasChanged();
    }
    
    public void CloneTemplate()
    {
        var clone = Cloner.Clone(CurrentQuest);
        clone.Id = Repository.GetAll<Quest>().Count() + 1;
        clone.Variables.AssetCode($"{CurrentQuest.Variables.AssetCode()}-clone");
        clone.GenerateLocaleCodes(clone.Variables.AssetCode());
        Repository.Create<Quest>(clone);
        
        var options = new {message = $"Cloned Quest {CurrentQuest.Variables.AssetCode()}", type = "is-success", position = "bottom-center"};
        JS.InvokeAsync<object>("bulmaToast.toast", options);
        
        CurrentQuest = clone;
        StateHasChanged();
    }
    
    public void DeleteTemplate()
    {
        Repository.Delete<Quest>(CurrentQuest.Id);
        var options = new {message = $"Deleted Item {CurrentQuest.Variables.AssetCode()}", type = "is-success", position = "bottom-center"};
        JS.InvokeAsync<object>("bulmaToast.toast", options);   
        SelectDefault();
    }

    public async void SaveChanges()
    {
        try
        {
            await SavePipeline.Execute(Repository.GetAll<Quest>());
            var options = new {message = "Quests saved", type = "is-success", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);

        }
        catch (Exception e)
        {
            var options = new {message = $"Error Saving: {e.Message}", type = "is-danger", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);   
        }
    }
    
    public void UpdateObjectives(IReadOnlyCollection<Objective> updatedObjectives)
    {
        CurrentQuest.Objectives = updatedObjectives;
        StateHasChanged();
    }
    
    public void UpdateRewards(IReadOnlyCollection<Reward> updatedRewards)
    {
        CurrentQuest.Rewards = updatedRewards;
        StateHasChanged();
    }
    
    public void UpdateGifts(IReadOnlyCollection<Reward> updatedGifts)
    {
        CurrentQuest.Gifts = updatedGifts;
        StateHasChanged();
    }
    
    public void UpdateRequirements(IReadOnlyCollection<Requirement> updatedRequirements)
    {
        CurrentQuest.Requirements = updatedRequirements;
        StateHasChanged();
    }
    
    public void OnAssetCodeChanged(string newAssetCode)
    { CurrentQuest.UpdateLocale(newAssetCode, LocaleRepository); }
}
